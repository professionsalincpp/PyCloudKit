[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "HTTPConnection",
        "importPath": "http.client",
        "description": "http.client",
        "isExtraImport": true,
        "detail": "http.client",
        "documentation": {}
    },
    {
        "label": "HTTPResponse",
        "importPath": "http.client",
        "description": "http.client",
        "isExtraImport": true,
        "detail": "http.client",
        "documentation": {}
    },
    {
        "label": "http.server",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "http.server",
        "description": "http.server",
        "detail": "http.server",
        "documentation": {}
    },
    {
        "label": "BaseHTTPRequestHandler",
        "importPath": "http.server",
        "description": "http.server",
        "isExtraImport": true,
        "detail": "http.server",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "pyserver",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyserver",
        "description": "pyserver",
        "detail": "pyserver",
        "documentation": {}
    },
    {
        "label": "AsyncRequest",
        "kind": 6,
        "importPath": "pyserver.src.request",
        "description": "pyserver.src.request",
        "peekOfCode": "class AsyncRequest:\n    def __init__(self, host: str, port: int) -> None:\n        self.host: str = host\n        self.port: int = port\n        self.client: Optional[HTTPConnection] = None\n    async def _start(self) -> None:\n        self.client = HTTPConnection(self.host, self.port)\n        await asyncio.to_thread(self.client.connect)\n    async def start(self) -> None:\n        await asyncio.to_thread(self._start)",
        "detail": "pyserver.src.request",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "pyserver.src.request",
        "description": "pyserver.src.request",
        "peekOfCode": "class Response:\n    status_code: int\n    headers: Dict[str, str]\n    body: bytes\n    def __str__(self) -> str:\n        return f\"Response(status_code={self.status_code}, headers={self.headers}, body={self.body})\"\n    def __repr__(self) -> str:\n        return f\"Response(status_code={self.status_code}, headers={self.headers}, body={self.body})\"\n@dataclass\nclass Request(Response):",
        "detail": "pyserver.src.request",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "pyserver.src.request",
        "description": "pyserver.src.request",
        "peekOfCode": "class Request(Response):\n    params: Dict[str, str]\n    def __str__(self) -> str:\n        return f\"Request(status_code={self.status_code}, headers={self.headers}, body={self.body}, params={self.params})\"\n    def __repr__(self) -> str:\n        return f\"Request(status_code={self.status_code}, headers={self.headers}, body={self.body}, params={self.params})\"\nclass RequestHandler:\n    class Method(Enum):\n        GET = 1\n        POST = 2",
        "detail": "pyserver.src.request",
        "documentation": {}
    },
    {
        "label": "RequestHandler",
        "kind": 6,
        "importPath": "pyserver.src.request",
        "description": "pyserver.src.request",
        "peekOfCode": "class RequestHandler:\n    class Method(Enum):\n        GET = 1\n        POST = 2\n    def __init__(self, func: Callable[[Request], Response], method: Method=Method.GET, path: str=\"/\") -> None:\n        self.func = func\n        self.method = method\n        self.path = path\n    async def check_signature(self) -> None:\n        if not inspect.iscoroutinefunction(self.func):",
        "detail": "pyserver.src.request",
        "documentation": {}
    },
    {
        "label": "create_async_request_handler",
        "kind": 2,
        "importPath": "pyserver.src.request",
        "description": "pyserver.src.request",
        "peekOfCode": "def create_async_request_handler(handlers: List[RequestHandler]) -> type[create_async_request_handler.AsyncRequestHandler]:\n    class AsyncRequestHandler(BaseHTTPRequestHandler):\n        def __init__(self, request, client_address, server):\n            \"\"\"\n            :param request: The request object\n            :param client_address: The client address\n            :param server: The server object\n            \"\"\"\n            self.__init_handlers(handlers)  # Call the __init__ method of the current class\n            super().__init__(request, client_address, server)",
        "detail": "pyserver.src.request",
        "documentation": {}
    },
    {
        "label": "AsyncServer",
        "kind": 6,
        "importPath": "pyserver.src.server",
        "description": "pyserver.src.server",
        "peekOfCode": "class AsyncServer:\n    def __init__(self, host: str, port: int) -> None:\n        self.host: str = host\n        self.port: int = port\n        self.server: Optional[http.server.HTTPServer] = None\n        self.task: Optional[asyncio.Task] = None\n        self.handlers: List[RequestHandler] = []\n        print(f'Start server on http://{self.host}:{self.port}')\n    def route(self, path: str, method: Literal[RequestHandler.Method.GET, RequestHandler.Method.POST] = RequestHandler.Method.GET) -> None:\n        def decorator(func: Callable[[RequestHandler], RequestHandler]) -> Callable[[RequestHandler], RequestHandler]:",
        "detail": "pyserver.src.server",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    server.start()\nif __name__ == '__main__':\n    main()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "server = pyserver.AsyncServer('localhost', 8080)\n@server.route('/add')\nasync def add(request: pyserver.Request) -> pyserver.Response:\n    if request.params.get('a') is None or request.params.get('b') is None:\n        return pyserver.Response(400, {'Content-Type': 'text/plain'}, b'Please provide a and b')\n    a = int(request.params['a'])\n    b = int(request.params['b'])\n    return pyserver.Response(200, {'Content-Type': 'text/plain'}, str(a + b).encode('utf-8'))\ndef main():\n    server.start()",
        "detail": "main",
        "documentation": {}
    }
]
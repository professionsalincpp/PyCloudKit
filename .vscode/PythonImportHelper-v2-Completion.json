[
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "override",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "HTTPConnection",
        "importPath": "http.client",
        "description": "http.client",
        "isExtraImport": true,
        "detail": "http.client",
        "documentation": {}
    },
    {
        "label": "HTTPResponse",
        "importPath": "http.client",
        "description": "http.client",
        "isExtraImport": true,
        "detail": "http.client",
        "documentation": {}
    },
    {
        "label": "http.server",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "http.server",
        "description": "http.server",
        "detail": "http.server",
        "documentation": {}
    },
    {
        "label": "BaseHTTPRequestHandler",
        "importPath": "http.server",
        "description": "http.server",
        "isExtraImport": true,
        "detail": "http.server",
        "documentation": {}
    },
    {
        "label": "CloudServer",
        "importPath": "pyserver.cloud",
        "description": "pyserver.cloud",
        "isExtraImport": true,
        "detail": "pyserver.cloud",
        "documentation": {}
    },
    {
        "label": "CloudClient",
        "importPath": "pyserver.cloud",
        "description": "pyserver.cloud",
        "isExtraImport": true,
        "detail": "pyserver.cloud",
        "documentation": {}
    },
    {
        "label": "from_string",
        "importPath": "pyserver.cloud.cloud",
        "description": "pyserver.cloud.cloud",
        "isExtraImport": true,
        "detail": "pyserver.cloud.cloud",
        "documentation": {}
    },
    {
        "label": "CloudObject",
        "kind": 6,
        "importPath": "pyserver.cloud.cloud",
        "description": "pyserver.cloud.cloud",
        "peekOfCode": "class CloudObject:\n    def __init__(self, value: Any) -> None:\n        self.value = value\n    def to_string(self) -> str:\n        raise NotImplementedError\n    def from_string(self, value: str) -> None:\n        raise NotImplementedError\nclass PyCloudObject(CloudObject):\n    def __init__(self, value: Any) -> None:\n        self.value = value",
        "detail": "pyserver.cloud.cloud",
        "documentation": {}
    },
    {
        "label": "PyCloudObject",
        "kind": 6,
        "importPath": "pyserver.cloud.cloud",
        "description": "pyserver.cloud.cloud",
        "peekOfCode": "class PyCloudObject(CloudObject):\n    def __init__(self, value: Any) -> None:\n        self.value = value\n    def to_string(self) -> str:\n        if isinstance(self.value, str):\n            return f'\"{self.value}\"'\n        return str(self.value)\n    def from_string(self, value: str) -> None:\n        self.value = eval(value)\n    def __repr__(self) -> str:",
        "detail": "pyserver.cloud.cloud",
        "documentation": {}
    },
    {
        "label": "ClassCloudObject",
        "kind": 6,
        "importPath": "pyserver.cloud.cloud",
        "description": "pyserver.cloud.cloud",
        "peekOfCode": "class ClassCloudObject(CloudObject):\n    def __init__(self, value: object) -> None:\n        super().__init__(value)\n    def to_string(self) -> str:\n        _class = self.value.__class__\n        _dict = _class.__dict__\n        return f\"{_class.__name__}({_dict})\"\n    def from_string(self, value: str) -> None:\n        _classstr = value.split('(')[0]\n        _dictstr = value.split('(')[1].rstrip(')')",
        "detail": "pyserver.cloud.cloud",
        "documentation": {}
    },
    {
        "label": "AnyCloudObject",
        "kind": 6,
        "importPath": "pyserver.cloud.cloud",
        "description": "pyserver.cloud.cloud",
        "peekOfCode": "class AnyCloudObject(CloudObject):\n    def __init__(self, value: Any) -> None:\n        super().__init__(value)\n    def to_string(self) -> str:\n        if is_py_object(self.value):\n            return PyCloudObject(self.value).to_string()\n        elif is_class_object(self.value):\n            return ClassCloudObject(self.value).to_string()\n        raise NotImplementedError\n    def from_string(self, value: str) -> None:",
        "detail": "pyserver.cloud.cloud",
        "documentation": {}
    },
    {
        "label": "CloudDatabase",
        "kind": 6,
        "importPath": "pyserver.cloud.cloud",
        "description": "pyserver.cloud.cloud",
        "peekOfCode": "class CloudDatabase:\n    def __init__(self, path: str) -> None:\n        self.path: str = path\n        self.data: dict[str, AnyCloudObject] = {}\n        self.database = sqlite3.connect(self.path)\n        self.cursor = self.database.cursor()\n        self.cursor.execute(\"CREATE TABLE IF NOT EXISTS objects (key TEXT PRIMARY KEY, value TEXT)\")\n        self.database.commit()\n    def load(self) -> None:\n        self.cursor.execute(\"SELECT key, value FROM objects\")",
        "detail": "pyserver.cloud.cloud",
        "documentation": {}
    },
    {
        "label": "CloudServer",
        "kind": 6,
        "importPath": "pyserver.cloud.cloud",
        "description": "pyserver.cloud.cloud",
        "peekOfCode": "class CloudServer(AsyncServer):\n    def __init__(self, host: str, port: int, database_path: str) -> None:\n        super().__init__(host, port)\n        self.database = CloudDatabase(database_path)\n        self.database.load()\n        self.handlers.append(RequestHandler(self.get, RequestHandler.Method.GET, \"/get\"))\n        self.handlers.append(RequestHandler(self.set, RequestHandler.Method.GET, \"/set\"))\n        self.handlers.append(RequestHandler(self.delete, RequestHandler.Method.GET, \"/delete\"))\n    def start(self) -> None:\n        super().start()",
        "detail": "pyserver.cloud.cloud",
        "documentation": {}
    },
    {
        "label": "CloudClient",
        "kind": 6,
        "importPath": "pyserver.cloud.cloud",
        "description": "pyserver.cloud.cloud",
        "peekOfCode": "class CloudClient(AsyncClient):\n    def __init__(self, host: str, port: int) -> None:\n        super().__init__(host, port)\n    async def set(self, key: str, value: Any) -> None:\n        obj = AnyCloudObject(value)\n        print(f\"Set {key} to {obj.to_string()}\")\n        await super().get(f\"/set?key={key}&value={obj.to_string()}\")\n    async def get(self, key: str) -> Any:\n        objstr = (await super().get(f\"/get?key={key}\")).decode(\"utf-8\")\n        print(f\"Get {key} from {objstr}\")",
        "detail": "pyserver.cloud.cloud",
        "documentation": {}
    },
    {
        "label": "is_py_object",
        "kind": 2,
        "importPath": "pyserver.cloud.cloud",
        "description": "pyserver.cloud.cloud",
        "peekOfCode": "def is_py_object(value: Any) -> bool:\n    return isinstance(value, py_object_union)\ndef is_class_object(value: Any) -> bool:\n    return isinstance(value, object) and not is_py_object(value)\ndef decode_string(value: str) -> str:\n    return value.replace(\"%22\", '\"').replace(\"%27\", \"'\").replace(\"%20\", \" \").replace(\"%5B\", \"[\").replace(\"%5D\", \"]\").replace(\"%2C\", \",\").replace(\"%3D\", \"=\").replace(\"%2B\", \"+\").replace(\"%3A\", \":\").replace(\"%3B\", \";\").replace(\"%40\", \"@\").replace(\"%24\", \"$\").replace(\"%7B\", \"{\").replace(\"%7D\", \"}\")\ndef encode_string(value: str) -> str:\n    return value.replace('\"', \"%22\").replace(\"'\", \"%27\").replace(' ', \"%20\").replace(\"[\", \"%5B\").replace(\"]\", \"%5D\").replace(\",\", \"%2C\").replace(\"=\", \"%3D\").replace(\"+\", \"%2B\").replace(\":\", \"%3A\").replace(\";\",\"%3B\").replace(\"@\",\"%40\").replace(\"$\",\"%24\").replace(\"{\",\"%7B\").replace(\"}\",\"%7D\")\ndef from_string(value: str) -> Any:\n    try:",
        "detail": "pyserver.cloud.cloud",
        "documentation": {}
    },
    {
        "label": "is_class_object",
        "kind": 2,
        "importPath": "pyserver.cloud.cloud",
        "description": "pyserver.cloud.cloud",
        "peekOfCode": "def is_class_object(value: Any) -> bool:\n    return isinstance(value, object) and not is_py_object(value)\ndef decode_string(value: str) -> str:\n    return value.replace(\"%22\", '\"').replace(\"%27\", \"'\").replace(\"%20\", \" \").replace(\"%5B\", \"[\").replace(\"%5D\", \"]\").replace(\"%2C\", \",\").replace(\"%3D\", \"=\").replace(\"%2B\", \"+\").replace(\"%3A\", \":\").replace(\"%3B\", \";\").replace(\"%40\", \"@\").replace(\"%24\", \"$\").replace(\"%7B\", \"{\").replace(\"%7D\", \"}\")\ndef encode_string(value: str) -> str:\n    return value.replace('\"', \"%22\").replace(\"'\", \"%27\").replace(' ', \"%20\").replace(\"[\", \"%5B\").replace(\"]\", \"%5D\").replace(\",\", \"%2C\").replace(\"=\", \"%3D\").replace(\"+\", \"%2B\").replace(\":\", \"%3A\").replace(\";\",\"%3B\").replace(\"@\",\"%40\").replace(\"$\",\"%24\").replace(\"{\",\"%7B\").replace(\"}\",\"%7D\")\ndef from_string(value: str) -> Any:\n    try:\n        return eval(value)\n    except:",
        "detail": "pyserver.cloud.cloud",
        "documentation": {}
    },
    {
        "label": "decode_string",
        "kind": 2,
        "importPath": "pyserver.cloud.cloud",
        "description": "pyserver.cloud.cloud",
        "peekOfCode": "def decode_string(value: str) -> str:\n    return value.replace(\"%22\", '\"').replace(\"%27\", \"'\").replace(\"%20\", \" \").replace(\"%5B\", \"[\").replace(\"%5D\", \"]\").replace(\"%2C\", \",\").replace(\"%3D\", \"=\").replace(\"%2B\", \"+\").replace(\"%3A\", \":\").replace(\"%3B\", \";\").replace(\"%40\", \"@\").replace(\"%24\", \"$\").replace(\"%7B\", \"{\").replace(\"%7D\", \"}\")\ndef encode_string(value: str) -> str:\n    return value.replace('\"', \"%22\").replace(\"'\", \"%27\").replace(' ', \"%20\").replace(\"[\", \"%5B\").replace(\"]\", \"%5D\").replace(\",\", \"%2C\").replace(\"=\", \"%3D\").replace(\"+\", \"%2B\").replace(\":\", \"%3A\").replace(\";\",\"%3B\").replace(\"@\",\"%40\").replace(\"$\",\"%24\").replace(\"{\",\"%7B\").replace(\"}\",\"%7D\")\ndef from_string(value: str) -> Any:\n    try:\n        return eval(value)\n    except:\n        return value\nclass CloudObject:",
        "detail": "pyserver.cloud.cloud",
        "documentation": {}
    },
    {
        "label": "encode_string",
        "kind": 2,
        "importPath": "pyserver.cloud.cloud",
        "description": "pyserver.cloud.cloud",
        "peekOfCode": "def encode_string(value: str) -> str:\n    return value.replace('\"', \"%22\").replace(\"'\", \"%27\").replace(' ', \"%20\").replace(\"[\", \"%5B\").replace(\"]\", \"%5D\").replace(\",\", \"%2C\").replace(\"=\", \"%3D\").replace(\"+\", \"%2B\").replace(\":\", \"%3A\").replace(\";\",\"%3B\").replace(\"@\",\"%40\").replace(\"$\",\"%24\").replace(\"{\",\"%7B\").replace(\"}\",\"%7D\")\ndef from_string(value: str) -> Any:\n    try:\n        return eval(value)\n    except:\n        return value\nclass CloudObject:\n    def __init__(self, value: Any) -> None:\n        self.value = value",
        "detail": "pyserver.cloud.cloud",
        "documentation": {}
    },
    {
        "label": "from_string",
        "kind": 2,
        "importPath": "pyserver.cloud.cloud",
        "description": "pyserver.cloud.cloud",
        "peekOfCode": "def from_string(value: str) -> Any:\n    try:\n        return eval(value)\n    except:\n        return value\nclass CloudObject:\n    def __init__(self, value: Any) -> None:\n        self.value = value\n    def to_string(self) -> str:\n        raise NotImplementedError",
        "detail": "pyserver.cloud.cloud",
        "documentation": {}
    },
    {
        "label": "py_object_union",
        "kind": 5,
        "importPath": "pyserver.cloud.cloud",
        "description": "pyserver.cloud.cloud",
        "peekOfCode": "py_object_union = Union[str, int, float, bool, list, dict, bytes, bytearray, tuple, None] \ndef is_py_object(value: Any) -> bool:\n    return isinstance(value, py_object_union)\ndef is_class_object(value: Any) -> bool:\n    return isinstance(value, object) and not is_py_object(value)\ndef decode_string(value: str) -> str:\n    return value.replace(\"%22\", '\"').replace(\"%27\", \"'\").replace(\"%20\", \" \").replace(\"%5B\", \"[\").replace(\"%5D\", \"]\").replace(\"%2C\", \",\").replace(\"%3D\", \"=\").replace(\"%2B\", \"+\").replace(\"%3A\", \":\").replace(\"%3B\", \";\").replace(\"%40\", \"@\").replace(\"%24\", \"$\").replace(\"%7B\", \"{\").replace(\"%7D\", \"}\")\ndef encode_string(value: str) -> str:\n    return value.replace('\"', \"%22\").replace(\"'\", \"%27\").replace(' ', \"%20\").replace(\"[\", \"%5B\").replace(\"]\", \"%5D\").replace(\",\", \"%2C\").replace(\"=\", \"%3D\").replace(\"+\", \"%2B\").replace(\":\", \"%3A\").replace(\";\",\"%3B\").replace(\"@\",\"%40\").replace(\"$\",\"%24\").replace(\"{\",\"%7B\").replace(\"}\",\"%7D\")\ndef from_string(value: str) -> Any:",
        "detail": "pyserver.cloud.cloud",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "kind": 6,
        "importPath": "pyserver.src.client",
        "description": "pyserver.src.client",
        "peekOfCode": "class AsyncClient:\n    def __init__(self, host: str, port: int) -> None:\n        self.host: str = host\n        self.port: int = port\n    async def get(self, path: str) -> Response:\n        request = AsyncRequest(self.host, self.port)\n        await request.start()\n        try:\n            print(f\"Requesting {path}\")\n            return await request.get(path)",
        "detail": "pyserver.src.client",
        "documentation": {}
    },
    {
        "label": "AsyncRequest",
        "kind": 6,
        "importPath": "pyserver.src.request",
        "description": "pyserver.src.request",
        "peekOfCode": "class AsyncRequest:\n    def __init__(self, host: str, port: int) -> None:\n        self.host: str = host\n        self.port: int = port\n        self.client: Optional[HTTPConnection] = None\n    async def _start(self) -> None:\n        self.client = HTTPConnection(self.host, self.port)\n        print(f\"Client connected {self.client}\")\n        await asyncio.to_thread(self.client.connect)\n    async def start(self) -> None:",
        "detail": "pyserver.src.request",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "pyserver.src.request",
        "description": "pyserver.src.request",
        "peekOfCode": "class Response:\n    status_code: int\n    headers: Dict[str, str]\n    body: bytes\n    def __str__(self) -> str:\n        return f\"Response(status_code={self.status_code}, headers={self.headers}, body={self.body})\"\n    def __repr__(self) -> str:\n        return f\"Response(status_code={self.status_code}, headers={self.headers}, body={self.body})\"\n@dataclass\nclass Request(Response):",
        "detail": "pyserver.src.request",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "pyserver.src.request",
        "description": "pyserver.src.request",
        "peekOfCode": "class Request(Response):\n    params: Dict[str, str]\n    def __str__(self) -> str:\n        return f\"Request(status_code={self.status_code}, headers={self.headers}, body={self.body}, params={self.params})\"\n    def __repr__(self) -> str:\n        return f\"Request(status_code={self.status_code}, headers={self.headers}, body={self.body}, params={self.params})\"\nclass RequestHandler:\n    class Method(Enum):\n        GET = 1\n        POST = 2",
        "detail": "pyserver.src.request",
        "documentation": {}
    },
    {
        "label": "RequestHandler",
        "kind": 6,
        "importPath": "pyserver.src.request",
        "description": "pyserver.src.request",
        "peekOfCode": "class RequestHandler:\n    class Method(Enum):\n        GET = 1\n        POST = 2\n    def __init__(self, func: Callable[[Request], Response], method: Method=Method.GET, path: str=\"/\") -> None:\n        self.func = func\n        self.method = method\n        self.path = path\n    async def check_signature(self) -> None:\n        if not inspect.iscoroutinefunction(self.func):",
        "detail": "pyserver.src.request",
        "documentation": {}
    },
    {
        "label": "encode_string",
        "kind": 2,
        "importPath": "pyserver.src.request",
        "description": "pyserver.src.request",
        "peekOfCode": "def encode_string(value: str) -> str:\n    return value.replace('\"', \"%22\").replace(\"'\", \"%27\").replace(' ', \"%20\").replace(\"[\", \"%5B\").replace(\"]\", \"%5D\").replace(\",\", \"%2C\").replace(\"+\", \"%2B\").replace(\":\", \"%3A\").replace(\";\",\"%3B\").replace(\"@\",\"%40\").replace(\"$\",\"%24\").replace(\"{\",\"%7B\").replace(\"}\",\"%7D\")\nclass AsyncRequest:\n    def __init__(self, host: str, port: int) -> None:\n        self.host: str = host\n        self.port: int = port\n        self.client: Optional[HTTPConnection] = None\n    async def _start(self) -> None:\n        self.client = HTTPConnection(self.host, self.port)\n        print(f\"Client connected {self.client}\")",
        "detail": "pyserver.src.request",
        "documentation": {}
    },
    {
        "label": "create_async_request_handler",
        "kind": 2,
        "importPath": "pyserver.src.request",
        "description": "pyserver.src.request",
        "peekOfCode": "def create_async_request_handler(handlers: List[RequestHandler]) -> type[create_async_request_handler.AsyncRequestHandler]:\n    class AsyncRequestHandler(BaseHTTPRequestHandler):\n        def __init__(self, request, client_address, server):\n            \"\"\"\n            :param request: The request object\n            :param client_address: The client address\n            :param server: The server object\n            \"\"\"\n            self.__init_handlers(handlers)  # Call the __init__ method of the current class\n            super().__init__(request, client_address, server)",
        "detail": "pyserver.src.request",
        "documentation": {}
    },
    {
        "label": "AsyncServer",
        "kind": 6,
        "importPath": "pyserver.src.server",
        "description": "pyserver.src.server",
        "peekOfCode": "class AsyncServer:\n    def __init__(self, host: str, port: int) -> None:\n        self.host: str = host\n        self.port: int = port\n        self.server: Optional[http.server.HTTPServer] = None\n        self.task: Optional[asyncio.Task] = None\n        self.handlers: List[RequestHandler] = []\n        self.__post_init__()\n        print(f'Start server on http://{self.host}:{self.port}')\n    def __post_init__(self):",
        "detail": "pyserver.src.server",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    server.start()\nif __name__ == '__main__':\n    main()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "server = CloudServer('127.0.0.1', 8080, 'databases/cloud.db')\ndef main():\n    server.start()\nif __name__ == '__main__':\n    main()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "set",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def set(key, value):\n    asyncio.run(client.set(key, value))\ndef get(key):\n    return asyncio.run(client.get(key))\ndef main():\n    while True:\n        a = input()\n        splitted = a.split(\" \")\n        if len(splitted) == 2:\n            print(f\"Set {splitted[0]} to {splitted[1]} with type {type(from_string(splitted[1]))}\")",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def get(key):\n    return asyncio.run(client.get(key))\ndef main():\n    while True:\n        a = input()\n        splitted = a.split(\" \")\n        if len(splitted) == 2:\n            print(f\"Set {splitted[0]} to {splitted[1]} with type {type(from_string(splitted[1]))}\")\n            set(splitted[0], from_string(splitted[1]))\n        elif len(splitted) == 1:",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def main():\n    while True:\n        a = input()\n        splitted = a.split(\" \")\n        if len(splitted) == 2:\n            print(f\"Set {splitted[0]} to {splitted[1]} with type {type(from_string(splitted[1]))}\")\n            set(splitted[0], from_string(splitted[1]))\n        elif len(splitted) == 1:\n            print(get(splitted[0]))\n        else:",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "client = CloudClient('127.0.0.1', 8080)\ndef set(key, value):\n    asyncio.run(client.set(key, value))\ndef get(key):\n    return asyncio.run(client.get(key))\ndef main():\n    while True:\n        a = input()\n        splitted = a.split(\" \")\n        if len(splitted) == 2:",
        "detail": "test",
        "documentation": {}
    }
]